@using RecipeBook.Web.Data
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject AppDbContext Db

<div class="recipe-card" @onclick="() => OpenDetails(Recipe.Id)">
    <img src="@Recipe.ImagePath" alt="@Recipe.Title" class="recipe-image" />

    <div class="recipe-info">
        <h4 class="recipe-title">@Recipe.Title</h4>
        <p class="recipe-category">@Recipe.Category</p>
        <p class="recipe-desc">@Truncate(Recipe.Steps, 100)</p>
        <small class="recipe-date">Created: @Recipe.CreatedAt.ToLocalTime().ToString("g")</small>

        @if (CanManage)
        {
            <div class="card-actions" @onclick:stopPropagation="true">
                <button class="btn-edit" @onclick="() => EditRecipe(Recipe.Id)">Edit</button>
                <button class="btn-delete" @onclick="() => DeleteRecipe(Recipe.Id)">Delete</button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public Recipe Recipe { get; set; } = default!;
    [Parameter] public bool CanManage { get; set; }
    [Parameter] public EventCallback<int> OnDeleted { get; set; }

    private string Truncate(string? text, int maxLength)
    {
        if (string.IsNullOrWhiteSpace(text)) return string.Empty;
        return text.Length <= maxLength ? text : text.Substring(0, maxLength) + "...";
    }

    private void OpenDetails(int id)
    {
        Nav.NavigateTo($"/recipes/{id}");
    }

    private void EditRecipe(int id)
    {
        Nav.NavigateTo($"/recipes/edit/{id}");
    }

    private async Task DeleteRecipe(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this recipe?");
        if (!confirm) return;

        var entity = await Db.Recipes.FindAsync(id);
        if (entity is null) return;

        Db.Recipes.Remove(entity);
        await Db.SaveChangesAsync();
        await OnDeleted.InvokeAsync(id);
    }
}