// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipeBook.Web.Data;

#nullable disable

namespace RecipeBook.Web.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RecipeBook.Web.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RecipeBook.Web.Data.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Steps")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Main Dish",
                            CreatedAt = new DateTime(2025, 10, 4, 23, 46, 19, 440, DateTimeKind.Utc).AddTicks(3063),
                            ImagePath = "/images/recipes/jollof.jpg",
                            Ingredients = "2 cups rice\n1 can tomato paste\n2 cups chicken stock\n1 onion\n2 tomatoes\n1 tsp salt\n1 tsp pepper\n1 tsp curry powder\n2 tbsp oil",
                            Steps = "1. Blend tomatoes and onion.\n2. Heat oil and fry tomato paste for 5 minutes.\n3. Add blended mix, seasoning, and stock.\n4. Add rice and simmer until cooked.",
                            Title = "Ghanaian Jollof Rice",
                            UpdatedAt = new DateTime(2025, 10, 6, 23, 46, 19, 440, DateTimeKind.Utc).AddTicks(5306)
                        },
                        new
                        {
                            Id = 2,
                            Category = "Traditional",
                            CreatedAt = new DateTime(2025, 10, 7, 23, 46, 19, 440, DateTimeKind.Utc).AddTicks(6385),
                            ImagePath = "/images/recipes/redred.jpg",
                            Ingredients = "3 ripe plantains\n2 cups black-eyed beans\n1 onion\n1 cup palm oil\nSalt to taste\nPepper to taste",
                            Steps = "1. Boil beans until soft.\n2. Prepare palm oil sauce with onions and pepper.\n3. Mix beans with sauce.\n4. Fry sliced plantains until golden brown.",
                            Title = "Fried Plantain with Beans (Red Red)",
                            UpdatedAt = new DateTime(2025, 10, 9, 23, 46, 19, 440, DateTimeKind.Utc).AddTicks(6389)
                        },
                        new
                        {
                            Id = 3,
                            Category = "Soup",
                            CreatedAt = new DateTime(2025, 10, 8, 23, 46, 19, 440, DateTimeKind.Utc).AddTicks(6394),
                            ImagePath = "/images/recipes/lightsoup.jpg",
                            Ingredients = "1 whole chicken\n4 tomatoes\n1 onion\n2 scotch bonnet peppers\n1 tbsp tomato paste\nSalt and spices to taste",
                            Steps = "1. Season chicken and boil for 10 mins.\n2. Blend tomatoes, onion, and pepper.\n3. Add blend and tomato paste to chicken.\n4. Simmer until thick and chicken is tender.",
                            Title = "Chicken Light Soup",
                            UpdatedAt = new DateTime(2025, 10, 10, 23, 46, 19, 440, DateTimeKind.Utc).AddTicks(6395)
                        },
                        new
                        {
                            Id = 4,
                            Category = "Vegetarian",
                            CreatedAt = new DateTime(2025, 10, 11, 23, 46, 19, 440, DateTimeKind.Utc).AddTicks(6399),
                            ImagePath = "/images/recipes/stirfry.jpg",
                            Ingredients = "1 cup chopped carrots\n1 bell pepper\n1 onion\n1 cup broccoli\n2 tbsp soy sauce\n1 tbsp oil\nSalt to taste",
                            Steps = "1. Heat oil in pan.\n2. Add onion and stir for 1 min.\n3. Add vegetables and soy sauce.\n4. Stir-fry for 5 mins and serve warm.",
                            Title = "Vegetable Stir-Fry",
                            UpdatedAt = new DateTime(2025, 10, 13, 23, 46, 19, 440, DateTimeKind.Utc).AddTicks(6400)
                        },
                        new
                        {
                            Id = 5,
                            Category = "Dessert",
                            CreatedAt = new DateTime(2025, 10, 12, 23, 46, 19, 440, DateTimeKind.Utc).AddTicks(6403),
                            ImagePath = "/images/recipes/chocolatecake.jpg",
                            Ingredients = "2 cups flour\n1 cup sugar\n1/2 cup cocoa powder\n2 eggs\n1 cup milk\n1/2 cup butter\n1 tsp baking powder",
                            Steps = "1. Preheat oven to 180°C.\n2. Mix dry ingredients.\n3. Add wet ingredients and blend well.\n4. Pour into pan and bake 30–35 mins.",
                            Title = "Chocolate Cake",
                            UpdatedAt = new DateTime(2025, 10, 14, 23, 46, 19, 440, DateTimeKind.Utc).AddTicks(6404)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RecipeBook.Web.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RecipeBook.Web.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBook.Web.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RecipeBook.Web.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
